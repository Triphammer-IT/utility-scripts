#!/bin/bash

# Pre-commit Hook Setup Script
# Sets up whitespace linting as a pre-commit hook for the current repository

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to show help
show_help() {
    echo "Pre-commit Hook Setup Script"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help           Show this help message"
    echo "  -f, --fix            Set up hook to automatically fix issues"
    echo "  -e, --extensions     Comma-separated list of file extensions to check"
    echo "  -i, --ignore         Comma-separated list of patterns to ignore"
    echo "  --no-trailing        Don't check for trailing whitespace"
    echo "  --no-whitespace-only Don't check for whitespace-only lines"
    echo ""
    echo "Examples:"
    echo "  $0                           # Basic setup (check only)"
    echo "  $0 -f                        # Setup with auto-fix"
    echo "  $0 -e sh,py,js               # Check only shell, Python, JS files"
    echo "  $0 -i '*.log,*.tmp'          # Ignore log and temp files"
}

# Function to create pre-commit hook
create_pre_commit_hook() {
    local fix_mode="${fix:-false}"
    local extensions="${extensions:-}"
    local ignore_patterns="${ignore_patterns:-}"
    local check_trailing="${check_trailing:-true}"
    local check_whitespace_only="${check_whitespace_only:-true}"
    
    local hook_file=".git/hooks/pre-commit"
    local linter_path
    linter_path=$(realpath "$(dirname "$0")/whitespace-linter.sh")
    
    print_status "$BLUE" "Creating pre-commit hook..."
    
    # Create the hook file
    cat > "$hook_file" << EOF
#!/bin/bash

# Pre-commit hook for whitespace linting
# Generated by setup-pre-commit.sh

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to print colored output
print_status() {
    local color=\$1
    local message=\$2
    echo -e "\${color}\${message}\${NC}"
}

# Get list of staged files
staged_files=\$(git diff --cached --name-only --diff-filter=ACMR)

if [[ -z "\$staged_files" ]]; then
    print_status "\$GREEN" "No staged files to check."
    exit 0
fi

print_status "\$BLUE" "🔍 Running whitespace linter on staged files..."

# Build linter command
linter_cmd="$linter_path"

EOF

    # Add options to the hook
    if [[ "$fix_mode" == "true" ]]; then
        echo "linter_cmd=\"\$linter_cmd -f\"" >> "$hook_file"
    fi
    
    if [[ -n "$extensions" ]]; then
        echo "linter_cmd=\"\$linter_cmd -e $extensions\"" >> "$hook_file"
    fi
    
    if [[ -n "$ignore_patterns" ]]; then
        echo "linter_cmd=\"\$linter_cmd -i '$ignore_patterns'\"" >> "$hook_file"
    fi
    
    if [[ "$check_trailing" == "false" ]]; then
        echo "linter_cmd=\"\$linter_cmd --no-trailing\"" >> "$hook_file"
    fi
    
    if [[ "$check_whitespace_only" == "false" ]]; then
        echo "linter_cmd=\"\$linter_cmd --no-whitespace-only\"" >> "$hook_file"
    fi
    
    # Add the main hook logic
    cat >> "$hook_file" << 'EOF'

# Check each staged file
issues_found=false
for file in $staged_files; do
    if [[ -f "$file" ]]; then
        print_status "$BLUE" "Checking: $file"
        
        # Run linter on the file
        if ! $linter_cmd "$file"; then
            issues_found=true
        fi
    fi
done

if [[ "$issues_found" == "true" ]]; then
    print_status "$RED" "❌ Whitespace issues found in staged files!"
    print_status "$YELLOW" "💡 Tip: Use 'git add' to stage fixes, or run the linter with -f to auto-fix"
    exit 1
else
    print_status "$GREEN" "✅ All staged files pass whitespace linting!"
fi

exit 0
EOF

    # Make the hook executable
    chmod +x "$hook_file"
    
    print_status "$GREEN" "✅ Pre-commit hook created successfully!"
    print_status "$BLUE" "Hook location: $hook_file"
    
    if [[ "$fix_mode" == "true" ]]; then
        print_status "$YELLOW" "🔧 Hook is configured to automatically fix issues"
    else
        print_status "$YELLOW" "🔍 Hook will check for issues and prevent commits if found"
    fi
}

# Function to create pre-push hook
create_pre_push_hook() {
    local hook_file=".git/hooks/pre-push"
    local linter_path
    linter_path=$(realpath "$(dirname "$0")/whitespace-linter.sh")
    
    print_status "$BLUE" "Creating pre-push hook..."
    
    cat > "$hook_file" << EOF
#!/bin/bash

# Pre-push hook for whitespace linting
# Generated by setup-pre-commit.sh

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    local color=\$1
    local message=\$2
    echo -e "\${color}\${message}\${NC}"
}

print_status "\$BLUE" "🔍 Running whitespace linter before push..."

# Run linter on the entire repository
if ! $linter_path -r .; then
    print_status "\$RED" "❌ Whitespace issues found! Push aborted."
    print_status "\$YELLOW" "💡 Fix issues before pushing, or use the linter with -f to auto-fix"
    exit 1
fi

print_status "\$GREEN" "✅ Repository passes whitespace linting!"
exit 0
EOF

    chmod +x "$hook_file"
    print_status "$GREEN" "✅ Pre-push hook created successfully!"
}

# Function to setup pre-commit framework
setup_pre_commit_framework() {
    print_status "$BLUE" "Setting up pre-commit framework..."
    
    # Check if pre-commit is installed
    if ! command -v pre-commit &> /dev/null; then
        print_status "$YELLOW" "Installing pre-commit..."
        if command -v pip3 &> /dev/null; then
            pip3 install pre-commit
        elif command -v pip &> /dev/null; then
            pip install pre-commit
        else
            print_status "$RED" "Error: pip not found. Please install pre-commit manually."
            return 1
        fi
    fi
    
    # Create .pre-commit-config.yaml
    cat > .pre-commit-config.yaml << EOF
repos:
  - repo: local
    hooks:
      - id: whitespace-linter
        name: Whitespace Linter
        entry: $(realpath "$(dirname "$0")/whitespace-linter.sh")
        language: script
        files: \\.(sh|py|js|ts|html|css|md|txt|yml|yaml|json|xml)$
        args: [-v]
        
      - id: whitespace-linter-fix
        name: Whitespace Linter (Fix)
        entry: $(realpath "$(dirname "$0")/whitespace-linter.sh")
        language: script
        files: \\.(sh|py|js|ts|html|css|md|txt|yml|yaml|json|xml)$
        args: [-f]
        stages: [manual]
EOF

    # Install the hooks
    pre-commit install
    pre-commit install --hook-type pre-push
    
    print_status "$GREEN" "✅ Pre-commit framework setup complete!"
    print_status "$BLUE" "Configuration file: .pre-commit-config.yaml"
}

# Main function
main() {
    local fix=false
    local extensions=""
    local ignore_patterns=""
    local check_trailing=true
    local check_whitespace_only=true
    local use_framework=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -f|--fix)
                fix=true
                shift
                ;;
            -e|--extensions)
                extensions="$2"
                shift 2
                ;;
            -i|--ignore)
                ignore_patterns="$2"
                shift 2
                ;;
            --no-trailing)
                check_trailing=false
                shift
                ;;
            --no-whitespace-only)
                check_whitespace_only=false
                shift
                ;;
            --framework)
                use_framework=true
                shift
                ;;
            -*)
                print_status "$RED" "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                print_status "$RED" "Unexpected argument: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Check if we're in a git repository
    if [[ ! -d ".git" ]]; then
        print_status "$RED" "Error: Not in a git repository. Run this script from the root of a git repo."
        exit 1
    fi
    
    # Check if whitespace-linter.sh exists
    local linter_path
    linter_path=$(realpath "$(dirname "$0")/whitespace-linter.sh")
    if [[ ! -f "$linter_path" ]]; then
        print_status "$RED" "Error: whitespace-linter.sh not found at $linter_path"
        exit 1
    fi
    
    print_status "$BLUE" "🚀 Setting up whitespace linting automation..."
    
    if [[ "$use_framework" == "true" ]]; then
        setup_pre_commit_framework
    else
        create_pre_commit_hook
        create_pre_push_hook
    fi
    
    print_status "$GREEN" "🎉 Setup complete!"
    print_status "$YELLOW" "💡 Test the hook by making a commit with whitespace issues"
}

# Run main function with all arguments
main "$@"
